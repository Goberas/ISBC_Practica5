

//*------------------------------------------------------------------------------------------

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * HerramientaMarcado.java
 *
 * Created on 28-mar-2012, 20:39:42
 */

package GUI;

import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;

import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import es.ucm.fdi.gaia.ontobridge.OntoBridge;
import es.ucm.fdi.gaia.ontobridge.OntologyDocument;

/**
 *
 * @author gobo
 */
public class HerramientaMarcado extends javax.swing.JFrame {

    /** Creates new form HerramientaMarcado */
    public HerramientaMarcado() {
        
        inicializaOntobridge();
        initComponents();
        arbol = new PnlConceptsAndInstancesTree(ob, false);
        pOnto.add(arbol);
        //pack();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lOpciones = new javax.swing.JLabel();
        cAcciones = new javax.swing.JComboBox();
        cInstancias = new javax.swing.JComboBox();
        bMarcado = new javax.swing.JButton();
        pOnto = new javax.swing.JPanel();
        bCarga = new javax.swing.JButton();
        panelTabulado = new javax.swing.JTabbedPane();
        pFoto = new javax.swing.JPanel();
        pBuscar = new javax.swing.JPanel();
        pFotoRecu = new javax.swing.JPanel();
        bRecu = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaRecu = new javax.swing.JTable();
        textoRecu = new javax.swing.JTextField("Escenas de Bart Simpson en Los Simpson");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lOpciones.setText("Opciones de Marcado");

       
        Iterator<String> acciones = ob.listProperties("Imagen");
        ArrayList<String> accionList = new ArrayList<String>();
        while(acciones.hasNext()){
        	String accion = acciones.next();
        	if (!accion.contains("urlfoto") && !accion.contains("rodada_en"))
        		accionList.add(ob.getShortName(accion));
        }
        
        cAcciones.setModel(new DefaultComboBoxModel(accionList.toArray()));
        cAcciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cAccionesActionPerformed(evt);
            }
        });

        String accion = (String)cAcciones.getSelectedItem();
        Iterator<String> clases = ob.listPropertyRange(accion);
	    ArrayList<String> instanciasList = new ArrayList<String>();
	    if(clases.hasNext()){
	    	// Solo tenemos en cuenta cuando solo hay una clase
	        Iterator<String> instancias = ob.listInstances(clases.next());
	        while(instancias.hasNext()){
	        	instanciasList.add(ob.getShortName(instancias.next()));
	        }
	    }
	    cInstancias.setModel(new DefaultComboBoxModel(instanciasList.toArray()));
	    
	    cAcciones.setEnabled(false);
	    cInstancias.setEnabled(false);

        bMarcado.setText("Marcar");
        bMarcado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bMarcadoMouseClicked(evt);
            }
        });
        
        bMarcado.setEnabled(false);

        pOnto.setLayout(new java.awt.BorderLayout());

        bCarga.setText("Cargar Imagen");
        bCarga.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bCargaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pFotoLayout = new javax.swing.GroupLayout(pFoto);
        pFoto.setLayout(pFotoLayout);
        pFotoLayout.setHorizontalGroup(
            pFotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 686, Short.MAX_VALUE)
        );
        pFotoLayout.setVerticalGroup(
            pFotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 427, Short.MAX_VALUE)
        );

        panelTabulado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
            	cambiaEstado();
            }
        });
        panelTabulado.addTab("Marcar", pFoto);

        javax.swing.GroupLayout pFotoRecuLayout = new javax.swing.GroupLayout(pFotoRecu);
        pFotoRecu.setLayout(pFotoRecuLayout);
        pFotoRecuLayout.setHorizontalGroup(
            pFotoRecuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 464, Short.MAX_VALUE)
        );
        pFotoRecuLayout.setVerticalGroup(
            pFotoRecuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 375, Short.MAX_VALUE)
        );

        bRecu.setText("Recuperar");
        bRecu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bRecuMouseEvent(evt);
            }
        });

        tablaRecu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Imagenes"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaRecu.setFocusable(false);
        tablaRecu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
            	muestraImagen();
            }
        });
        jScrollPane2.setViewportView(tablaRecu);
        tablaRecu.getColumnModel().getColumn(0).setResizable(false);

        javax.swing.GroupLayout pBuscarLayout = new javax.swing.GroupLayout(pBuscar);
        pBuscar.setLayout(pBuscarLayout);
        pBuscarLayout.setHorizontalGroup(
            pBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pBuscarLayout.createSequentialGroup()
                .addGroup(pBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pFotoRecu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pBuscarLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(textoRecu)))
                .addGroup(pBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pBuscarLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                        .addComponent(bRecu, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59))
                    .addGroup(pBuscarLayout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE))))
        );
        pBuscarLayout.setVerticalGroup(
            pBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pBuscarLayout.createSequentialGroup()
                .addGroup(pBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pBuscarLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE))
                    .addComponent(pFotoRecu, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(pBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bRecu)
                    .addComponent(textoRecu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        panelTabulado.addTab("Buscar", pBuscar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pOnto, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelTabulado, javax.swing.GroupLayout.DEFAULT_SIZE, 691, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lOpciones)
                        .addGap(18, 18, 18)
                        .addComponent(cAcciones, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cInstancias, 0, 237, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bMarcado)
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(bCarga)
                        .addGap(321, 321, 321))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lOpciones)
                    .addComponent(cAcciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cInstancias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bMarcado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pOnto, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelTabulado, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bCarga)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void muestraImagen() {
    	if (tablaRecu.getRowCount()>0){
    		String url = "";
	    	String imagen = tablaRecu.getValueAt(tablaRecu.getSelectedRow(), 0).toString();
	    	Iterator<String> values = ob.listPropertyValue(imagen, "urlfoto");
	    	while (values.hasNext()){
	    		url = values.next();
	    	}
			ImageIcon foto = new ImageIcon(url);
			Graphics graf = pFotoRecu.getGraphics();
			graf.drawImage(foto.getImage(),0,0,pFotoRecu.getWidth(),pFotoRecu.getHeight(), null);
			pFotoRecu.paintComponents(graf);
    	}
	}

    private void bRecuMouseEvent(MouseEvent evt) {
		// Sacamos las imagenes:
        Iterator<String> imgs = ob.listInstances("Imagen");
		// Separamos por " de "
    	String[] mitad1 = textoRecu.getText().split(" de ");
    	if (mitad1[1].contains((CharSequence)(" en "))){
	        ArrayList<String> instanciasList = new ArrayList<String>();
	    	// Separamos por " en "
	    	String[] mitad2 = mitad1[1].split(" en ");
	    	// Sacamos los argumentos:
	        String arg1 = mitad2[0].replace((CharSequence)(" "),(CharSequence)("_"));
	        String arg2 = mitad2[1].replace((CharSequence)(" "),(CharSequence)("_"));
	        // Recuperamos:
        	while(imgs.hasNext()){
        		String imgName = imgs.next();
    	        Iterator<String> aparece = ob.listPropertyValue(imgName, "aparece");
    	        while (aparece.hasNext()){
            		String aux1 = ob.getShortName(aparece.next());
            		if (aux1.equals(arg1)){
            			// Vemos si sale en una pelicula:
            	        Iterator<String> propiedad = ob.listPropertyValue(imgName, "escena_de_pelicula");
            	        while (propiedad.hasNext()){
                    		String aux2 = ob.getShortName(propiedad.next());
                    		if (aux2.equals(arg2)){
                    			instanciasList.add(ob.getShortName(imgName));
                    			break;
                    		}
            	        }
            			// Vemos si sale en una serie:
            	        propiedad = ob.listPropertyValue(imgName, "escena_de_serie");
            	        while (propiedad.hasNext()){
                    		String aux2 = ob.getShortName(propiedad.next());
                    		if (aux2.equals(arg2)){
                    			instanciasList.add(ob.getShortName(imgName));
                    			break;
                    		}
            	        }
            			// Vemos si pertenece a algun genero:
            	        propiedad = ob.listPropertyValue(imgName, "escena_de_genero");
            	        while (propiedad.hasNext()){
                    		String aux2 = ob.getShortName(propiedad.next());
                    		if (aux2.equals(arg2)){
                    			instanciasList.add(ob.getShortName(imgName));
                    			break;
                    		}
            	        }
            		}
    	        }
            	Iterator<String> it = instanciasList.iterator();
            	imprimeTabla(it);
        	}
    	} else {
	        // Cogemos el argumento:
	        String arg = mitad1[1].replace((CharSequence)(" "),(CharSequence)("_"));
	        ArrayList<String> instanciasList = new ArrayList<String>();
    		// Recuperamos:
        	while(imgs.hasNext()){
        		String imgName = imgs.next();
    	        Iterator<String> aparece = ob.listPropertyValue(imgName, "aparece");
    	        while (aparece.hasNext()){
            		String aux = ob.getShortName(aparece.next());
            		if (aux.equals(arg)){
                		instanciasList.add(ob.getShortName(imgName));
                		break;
    	        	}
    	        }
        	}
        	Iterator<String> it = instanciasList.iterator();
        	imprimeTabla(it);
    	}
	}
    
    private void imprimeTabla(Iterator<String> it){        	
    	borraTabla();
		while(it.hasNext()){
			DefaultTableModel model=(DefaultTableModel) tablaRecu.getModel();
			model.addRow(new Object[]{
	        	it.next()
			});
		}
    }

	private void cambiaEstado() {
		if (panelTabulado.getSelectedIndex()==0){
			if (Imagen!=null){
				cAcciones.setEnabled(true);
				cInstancias.setEnabled(true);
				bMarcado.setEnabled(true);
				actualizaImagen();
			}
		} else {
			cAcciones.setEnabled(false);
			cInstancias.setEnabled(false);
			bMarcado.setEnabled(false);
		}
	}

    private void bMarcadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bMarcadoMouseClicked
        String propiedad = cAcciones.getSelectedItem().toString();
        String personaje = cInstancias.getSelectedItem().toString();
        
        String imgURL = Imagen.getAbsolutePath();
        String imgName = Imagen.getName().substring(0, Imagen.getName().length()-4); 
        // Quitamos la parte ".jpg":
        imgURL = imgURL.substring(0, imgURL.length()-4);
        // Si no esta creada la instancia de imagen se crea:
        if (!ob.existsInstance(imgName)){
        	ob.createInstance("Imagen", imgName);
        	ob.createDataTypeProperty(imgName, "urlfoto", imgURL);
        }
        ob.createDataTypeProperty(imgName, propiedad, personaje); 
        // Actualizamos arbol
        arbol.readOntology();
    }//GEN-LAST:event_bMarcadoMouseClicked

	private void cAccionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cAccionesActionPerformed
    	String accion = (String)cAcciones.getSelectedItem();

        Iterator<String> clases = ob.listPropertyRange(accion);
        ArrayList<String> instanciasList = new ArrayList<String>();
        if(clases.hasNext()){
        	// Solo tenemos en cuenta cuando solo hay una clase
        	Iterator<String> instancias = ob.listInstances(clases.next());
        	while(instancias.hasNext()){
        		instanciasList.add(ob.getShortName(instancias.next()));
        	}
        }
        cInstancias.setModel(new DefaultComboBoxModel(instanciasList.toArray()));
        cInstancias.setEnabled(true);
   	}//GEN-LAST:event_cAccionesActionPerformed

    private void bCargaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bCargaMouseClicked
    	JFileChooser filechooser=new JFileChooser();
 
    	if(filechooser.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){

    		Imagen = filechooser.getSelectedFile();
    		actualizaImagen();
    	
    		System.out.println("Imagen cargada: "+Imagen.getAbsolutePath());
            bMarcado.setEnabled(true);
    	    cAcciones.setEnabled(true);
    	    cInstancias.setEnabled(true);
    	    panelTabulado.setSelectedIndex(0);
    	}
    }//GEN-LAST:event_bCargaMouseClicked

    private void actualizaImagen() {
		ImageIcon foto = new ImageIcon(Imagen.getAbsolutePath());
		Graphics graf = pFoto.getGraphics();
		graf.drawImage(foto.getImage(),0,0,pFoto.getWidth(),pFoto.getHeight(), null);
		pFoto.paintComponents(graf);
	}

	private void inicializaOntobridge(){
    	ob= new OntoBridge();
    	ob.initWithPelletReasoner();
    	
    	OntologyDocument actoresOnto= new OntologyDocument("http://www.owl-ontologies.com/Actores.owl", "file:doc/ontologia/Actores.owl");
    	ob.loadOntology(actoresOnto, new ArrayList<OntologyDocument>(), false);
    }
	
	private void borraTabla() {
        DefaultTableModel model=(DefaultTableModel) tablaRecu.getModel();
        model.setRowCount(0);
	}
	
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HerramientaMarcado().setVisible(true);
            }
        });
    }

    private PnlConceptsAndInstancesTree arbol;
    private OntoBridge ob;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bCarga;
    private javax.swing.JButton bMarcado;
    private javax.swing.JButton bRecu;
    private javax.swing.JComboBox cAcciones;
    private javax.swing.JComboBox cInstancias;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lOpciones;
    private javax.swing.JPanel pBuscar;
    private javax.swing.JPanel pFoto;
    private javax.swing.JPanel pFotoRecu;
    private javax.swing.JPanel pOnto;
    private javax.swing.JTabbedPane panelTabulado;
    private javax.swing.JTable tablaRecu;
    private javax.swing.JTextField textoRecu;
    private File Imagen;
    // End of variables declaration//GEN-END:variables

}






